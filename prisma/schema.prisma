// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  displayName   String?   @unique
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  matches  UserMatch[]
  leagues  UserLeague[]
  accounts Account[]
  sessions Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  // these must be snake_case to conform with OAuth convention
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Status {
  PENDING
  COMPLETE
}

model Match {
  id        Int      @id @default(autoincrement())
  created   DateTime @default(now())
  status    Status   @default(PENDING)
  eventId   Int?
  rulesetId Int

  parent  Event?      @relation(fields: [eventId], references: [id])
  players UserMatch[]
  ruleset Ruleset     @relation(fields: [rulesetId], references: [id])
}

model UserMatch {
  matchId                 Int
  playerPosition          Int
  playerId                String?
  unregisteredPlaceholder String?
  rawScore                Int?
  chombos                 Int?
  adjustment              Decimal @default(0.0)

  player User? @relation(fields: [playerId], references: [id])
  match  Match @relation(fields: [matchId], references: [id])

  @@id([matchId, playerPosition])
}

model Event {
  id        Int       @id @default(autoincrement())
  startDate DateTime?
  endDate   DateTime?
  matches   Match[]
  parentId  Int
  parent    League    @relation(fields: [parentId], references: [id])
}

model League {
  id             Int       @id @default(autoincrement())
  name           String
  description    String?
  invitational   Boolean
  defaultRuleId  Int
  startingPoints Decimal   @default(0.0)
  startDate      DateTime? @default(now())
  endDate        DateTime?

  defaultRuleset  Ruleset      @relation(fields: [defaultRuleId], references: [id])
  events          Event[]
  UserSeriesEntry UserLeague[]
}

enum GameMode {
  SANMA
  YONMA
}

model Ruleset {
  id          Int          @id @default(autoincrement())
  gameMode    GameMode
  name        String
  description String?
  payload     Json
  uma         RulesetUma[]
  startPts    Int
  returnPts   Int
  chomboDelta Decimal // negative
  League      League[]
  Match       Match[]
}

model RulesetUma {
  parentId Int
  position Int // 1-indexed
  value    Decimal

  parent Ruleset @relation(fields: [parentId], references: [id])

  @@id([parentId, position])
}

model UserLeague {
  userId   String
  leagueId Int
  leniency Boolean

  user   User   @relation(fields: [userId], references: [id])
  league League @relation(fields: [leagueId], references: [id])

  @@id([leagueId, userId])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  displayName   String?   @unique
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  matches  UserMatch[]
  events   UserEvent[]
  accounts Account[]
  sessions Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  // these must be snake_case to conform with OAuth convention
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Status {
  PENDING
  COMPLETE
}

model Match {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now())
  status  Status   @default(PENDING)
  eventId Int?

  parent  Event?      @relation(fields: [eventId], references: [id])
  players UserMatch[]
}

model UserMatch {
  playerId   String
  matchId    Int
  rawScore   Int?
  chombos    Int?
  adjustment Decimal @default(0.0)

  player User  @relation(fields: [playerId], references: [id])
  match  Match @relation(fields: [matchId], references: [id])

  @@id([playerId, matchId])
}

model Event {
  id        Int         @id @default(autoincrement())
  startDate DateTime?
  endDate   DateTime?
  matches   Match[]
  parentId  Int?
  players   UserEvent[]
}

enum GameMode {
  SANMA
  YONMA
}

model Rule {
  id          Int       @id @default(autoincrement())
  gameMode    GameMode
  name        String
  description String?
  payload     Json
  uma         RuleUma[]
  startPts    Int
  returnPts   Int
}

model RuleUma {
  ruleId   Int
  position Int
  value    Decimal

  rule Rule @relation(fields: [ruleId], references: [id])

  @@id([ruleId, position])
}

model UserEvent {
  eventId  Int
  userId   String
  leniency Boolean

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@id([eventId, userId])
}

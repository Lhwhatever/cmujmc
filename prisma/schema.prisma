// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model User {
  id            String    @id @default(cuid())
  displayName   String?   @unique
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  andrew        String?
  discord       String?

  matches      UserMatch[]
  leagues      UserLeague[]
  accounts     Account[]
  sessions     Session[]
  transactions UserLeagueTransaction[]

  @@index([andrew], type: BTree)
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  providerType       String
  provider           String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires Int?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum Status {
  PENDING
  COMPLETE
}

model Match {
  id        Int      @id @default(autoincrement())
  time      DateTime @default(now())
  status    Status   @default(PENDING)
  eventId   Int?
  rulesetId Int

  parent  Event?      @relation(fields: [eventId], references: [id])
  players UserMatch[]
  ruleset Ruleset     @relation(fields: [rulesetId], references: [id])
}

model UserMatch {
  matchId                 Int
  playerPosition          Int // 1-indexed
  playerId                String?
  unregisteredPlaceholder String?
  rawScore                Int
  placementMin            Int // 1-indexed
  placementMax            Int // in the event of a tie, this would differ from placementMin

  player User?                   @relation(fields: [playerId], references: [id])
  match  Match                   @relation(fields: [matchId], references: [id])
  txns   UserLeagueTransaction[]

  @@id([matchId, playerPosition])
}

model Event {
  id          Int       @id @default(autoincrement())
  startDate   DateTime?
  endDate     DateTime?
  closingDate DateTime? // last time which users can enter
  matches     Match[]
  rulesetId   Int
  ruleset     Ruleset   @relation(fields: [rulesetId], references: [id])
  parentId    Int
  parent      League    @relation(fields: [parentId], references: [id])
}

model League {
  id                Int       @id @default(autoincrement())
  name              String
  description       String?
  invitational      Boolean
  defaultRuleId     Int
  startingPoints    Decimal   @default(0.0)
  startDate         DateTime? @default(now())
  endDate           DateTime?
  matchesRequired   Int       @default(3)
  softPenaltyCutoff Int       @default(3)

  defaultRuleset        Ruleset                 @relation(fields: [defaultRuleId], references: [id])
  events                Event[]
  users                 UserLeague[]
  userLeagueTransaction UserLeagueTransaction[]
}

enum GameMode {
  SANMA
  YONMA
}

model Ruleset {
  id          Int          @id @default(autoincrement())
  gameMode    GameMode
  name        String
  description String?
  payload     Json
  uma         RulesetUma[]
  startPts    Int
  returnPts   Int
  chomboDelta Decimal // negative
  League      League[]
  Match       Match[]
  Event       Event[]
}

model RulesetUma {
  parentId Int
  position Int // 1-indexed
  value    Decimal

  parent Ruleset @relation(fields: [parentId], references: [id])

  @@id([parentId, position])
}

model UserLeague {
  userId      String
  leagueId    Int
  freeChombos Int? // null if not on softer penalty

  user   User   @relation(fields: [userId], references: [id])
  league League @relation(fields: [leagueId], references: [id])

  @@id([leagueId, userId])
}

enum TransactionType {
  INITIAL
  MATCH_RESULT
  CHOMBO
  OTHER_MOD
}

model UserLeagueTransaction {
  id   String          @id @default(cuid())
  type TransactionType

  userId   String?
  leagueId Int
  user     User?   @relation(fields: [userId], references: [id])
  league   League  @relation(fields: [leagueId], references: [id])

  delta       Decimal
  time        DateTime @default(now())
  description String?

  userMatchMatchId        Int?
  userMatchPlayerPosition Int?
  match                   UserMatch? @relation(fields: [userMatchMatchId, userMatchPlayerPosition], references: [matchId, playerPosition])
}

model Wwyd {
  id      Int      @id @default(autoincrement())
  name    String
  schema  Json
  created DateTime @default(now())
  updated DateTime @default(now())
}
